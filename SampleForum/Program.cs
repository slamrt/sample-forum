var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    //при возникновении исключения/ошибки перенаправляет на "/error", чтобы сообщить 
    //об этом пользователю
    app.UseExceptionHandler("/Error");
    //для безопасности, чтобы использовался ssl сертификат
    //каждый раз когда сайт будет открываться через http, браузер будет перенаправлен 
    //на https
    app.UseHsts();
}

//настройка параметров переадресации по https
app.UseHttpsRedirection();

//компонент для отправки статических файлов клиенту
app.UseStaticFiles();

//проверяет соответствие маршрута и
//подбирает наиболее подходящие ответ на запрос по конкретному маршруту н-р: /profile
app.UseRouting();

//встроенный компонент для определения прав пользователя
app.UseAuthorization();

app.MapRazorPages();
app.Run();



//routing в asp.net - https://metanit.com/sharp/aspnet6/3.1.php
//Система маршрутизации отвечает за сопоставление входящих запросов с маршрутами и
//на основании результатов сопоставления выбирает
//для обработки запроса определенную конечную точку приложения.
//Конечная точка или endpoint представляет некоторый код,
//который обрабатывает запрос.
//По сути конечная точка объединяет шаблон маршрута, которому должен соответствовать запрос,
//и обработчик запроса по этому маршруту.
//-------
//Метод Мар добавляет конечные точки для обработки запросов типа GET
//-------
// в качестве параметра pattern принимает шаблон маршрута, которому должен соответствовать запрос.
// Данный параметр может представлять тип RoutePattern или string.
//Н-р: app.Map("/", () => "Index Page"); или app.Map("/about", () => "About Page"); или app.Map("/contact", () => "Contacts Page");